using BinaryProvider # requires BinaryProvider 0.3.0 or later

# Parse some basic command-line arguments
const verbose = "--verbose" in ARGS
const prefix = Prefix(get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")))
products = [
    LibraryProduct(prefix, String["libfftw3"], :libfftw3),
    LibraryProduct(prefix, String["libfftw3f"], :libfftw3f),
]

# Download binaries from hosted location
bin_prefix = "https://github.com/JuliaMath/FFTWBuilder/releases/download/v3.3.8"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    Linux(:aarch64, :glibc) => ("$bin_prefix/FFTW.aarch64-linux-gnu.tar.gz", "71afa420c5d66163c8d971a4cc534262f36aa9ae2e166f50bfa8b8339b7df3dc"),
    Linux(:aarch64, :musl) => ("$bin_prefix/FFTW.aarch64-linux-musl.tar.gz", "9648593f9a62b2912d14eb8740c2cc4ebd23ce0bb3e3a08d558a12757300f6db"),
    Linux(:armv7l, :glibc, :eabihf) => ("$bin_prefix/FFTW.arm-linux-gnueabihf.tar.gz", "2835dec6124007fb30dd127de311ed09f72345c8b9568ac80f94dd7f7997f1ac"),
    Linux(:armv7l, :musl, :eabihf) => ("$bin_prefix/FFTW.arm-linux-musleabihf.tar.gz", "54b332934829f590b8b4bb1b922570e379c5be0e7e42ac7b816890892ff0ae6b"),
    Linux(:i686, :glibc) => ("$bin_prefix/FFTW.i686-linux-gnu.tar.gz", "a1372d4607addb77b472841d9f5550f3c232daece32737b9360d5afb18ecf221"),
    Linux(:i686, :musl) => ("$bin_prefix/FFTW.i686-linux-musl.tar.gz", "4b1d3b72f8e52342ae2f56d7ac7b851da7355006276e9ec9af9bd4ed99d0aa50"),
    Windows(:i686) => ("$bin_prefix/FFTW.i686-w64-mingw32.tar.gz", "23cdc35639bb3f835d746c8f0dab1de7e3eb2a05644811d4ef855ebeff4ba757"),
    Linux(:powerpc64le, :glibc) => ("$bin_prefix/FFTW.powerpc64le-linux-gnu.tar.gz", "b88a5d8256bef8041f00d8e2f655de0b35cf5ed711bdcc5b23eef9c69cfce88e"),
    MacOS(:x86_64) => ("$bin_prefix/FFTW.x86_64-apple-darwin14.tar.gz", "95b079c4dd79b234f60abf6e64933b38ee2b4c9cab5948496c6ee1466fcc0098"),
    Linux(:x86_64, :glibc) => ("$bin_prefix/FFTW.x86_64-linux-gnu.tar.gz", "bc53998882358763e93a207570125ac587c45343c5bdd04d4ab9d3101cc6f6d8"),
    Linux(:x86_64, :musl) => ("$bin_prefix/FFTW.x86_64-linux-musl.tar.gz", "794cb91abc2bb7fb3601072d637617dd896e2abbd94bc612c4990eae1d526cba"),
    FreeBSD(:x86_64) => ("$bin_prefix/FFTW.x86_64-unknown-freebsd11.1.tar.gz", "77781b9f429a431faa02370aa9b70f22d7dd2ac57da31a38e7960cd92781402a"),
    Windows(:x86_64) => ("$bin_prefix/FFTW.x86_64-w64-mingw32.tar.gz", "9628bb5e6a19928e22169275339a224974e3dcee109c9d476dfb7d34236c52f4"),
)

# Install unsatisfied or updated dependencies:
unsatisfied = any(!satisfied(p; verbose=verbose) for p in products)
if haskey(download_info, platform_key())
    url, tarball_hash = download_info[platform_key()]
    if unsatisfied || !isinstalled(url, tarball_hash; prefix=prefix)
        # Download and install binaries
        install(url, tarball_hash; prefix=prefix, force=true, verbose=verbose)
    end
elseif unsatisfied
    # If we don't have a BinaryProvider-compatible .tar.gz to download, complain.
    # Alternatively, you could attempt to install from a separate provider,
    # build from source or something even more ambitious here.
    error("Your platform $(triplet(platform_key())) is not supported by this package!")
end

# Write out a deps.jl file that will contain mappings for our products
write_deps_file(joinpath(@__DIR__, "deps.jl"), products)
